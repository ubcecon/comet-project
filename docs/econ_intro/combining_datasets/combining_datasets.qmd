---
title: "04 - Combining Datasets"
author: COMET Team <br> _Valeria Zolla, Colby Chamber, Colin Grimes, Jonathan Graves_
date: 12 January 2023
description: This notebooks isn't done yet.
categories: [introduction, econ intro, R, data, syntax, tidyverse]
format: 
  html: default
  ipynb:
    jupyter:
      kernelspec:
        display_name: R
        language: r
        name: ir
---

```{.callout-warning}
TBD
```

# Adding and Removing Data
Another step in data cleaning involves bringing in new data from other datasets or dropping existing data from our data set entirely. In this step, we must always think very carefully about the purpose of our data in terms of the research we are doing. The underlying goal of our project should always guide decision to bring in new datasets or removing information from our existing one.

## Combining Datasets

Often we will need to draw on data from multiple datasets. Most of the time, these datasets will be available for download in different files (each for a given year, month, country, etc.). For example, if we are working with macroeconomic data from Statistics Canada such as inflation rates, GDP, and population, data for these variables may be stored in different datasets corresponding to different years. Thus, if we want to compile them we need to combine them into the same data frame.

There are two key ways of combining data, each reflecting different goals:

1.  When we want to add more observations from another dataset into our existing dataset, we call this **appending** data.
    * If you think of a dataset as a spreadsheet, this is like taking one dataset and "pasting" it into the bottom of a current dataset to add more observations. We do this when the observations from the other dataset have recorded data for all existing variables.
2.  When we want to add new variables and their data from another dataset into our existing dataset, we call this **merging** data.
    * This is like looking up values in a table and then adding a column; in Excel, this is called a `VLOOKUP`. Importantly, we can only merge data that share a common column or **key** to  identify observations with particular values. For example, if we want to merge in data from a different year but for the same people (observations) as those we are currently working with, datasets will usually have an identifying number for the person that functions as our key. In this dataset, every individual is identified by their `ppsort` number, so this is the key we would use to merge in new variables. 

## Appending Datasets
Let's say that our `census_data` data set is inexplicably missing 2 observations, the people coded as 867543 and 923845. These people have recorded observations for all of the same variables as those in our existing data frame, so we can simply append them to our `census_data` data frame. Let's add these two people to our data set for analysis by appending `extra_census_data` to `census_data`.

```{r}
extra_census_data <- data.frame(ppsort = c(867543, 923845), agegrp = c("20 to 24 years", "35 to 39 years"), 
                                ageimm = c("5 to 9 years", "0 to 4 years"), cip2011 = c("01 education", "01 education"),
                                fol = c("english only", "french only"), hdgree = c("bachelor's degree", "bachelor's degree"),
                                immstat = c("non-immigrants", "immigrants"), kol = c("english only", "french only"),
                                lfact = c("employed - worked in reference week", "employed - worked in reference week"),
                                locstud = c("ontario", "quebec"), mrkinc = c(20000, 34000), pkids = c("none", "one or more"),
                                pr = c("ontario", "quebec"), sex = c("male", "female"), vismin = c("chinese", "black"),
                                wages = c(15000, 30000), log_wages = c(9.615805, 10.308952), has_kids = c(0, 1),
                                retired = c(0, 0), minority = c(1, 1))

census_data <- rbind(census_data, extra_census_data)

glimpse(census_data)
```

Here we used the function `rbind()` to append these datasets. We did this because we were appending rows to the bottom of the data frame. Our `census_data` data set now has 2 more rows than before, meaning we have successfully appended these two observations to our data frame for analysis.

## Merging Datasets
Suppose now that we are undergoing research and realize that we would like to include religion in our analysis. However, we don't have a variable pertaining to it currently in our `census_data` data set. Luckily, we find the data set `more_census_data` which includes a dummy variable for whether the respondent `ppsort` is religious. This variable is coded as `religious` and equals 1 if the person self-identifies as religious and 0 if not. 

```{r}
set.seed(123) #ignore this function!

more_census_data <- data.frame(ppsort = census_data$ppsort, religious = sample(0:1, 382278, replace = TRUE))

glimpse(more_census_data)
```

We can see from glimpsing the above data set that it contains the same number of observations as our `census_data` data set, one observation for each `ppsort` ID. For each `ppsort` ID, there is a corresponding dummy of 0 or 1 indicating whether that person is religious. Since this is a new variable we want to add to our existing data set, we can merge this `more_census_data` into our existing data frame to match up each `religious` entry to its corresponding `ppsort` ID within the larger `census_data` data frame. We can do this with the function `merge()`. This function has the following default form:

Merged_Data <- merge(data frame A, data frame B, by = "the variable that is common in both data frames")

If the column on which we want to merge our datasets is named differently in the two data frames, we must specify each column name in the by = "" option above.

```{r}
census_data <- merge(census_data, more_census_data, by = "ppsort")
glimpse(census_data)
```

We can now see that our `census_data` data set has an additional variable, `religious`, with data for each person. This was an example of a simple 1:1 (one-to-one) merge since there was a perfect match between the number of observations in both datasets. In this way, there were no extra observations in either. However, this will not often be the case. 

Suppose we only had half of the `ppsort` IDs in our `more_census_data` data frame. When merging, we could have then chosen to create our merged data frame with ONLY those `ppsort` who can find a "match" in both datasets. We could do this with the `left_join()` or `right_join()` functions, using the former if our first specified data set was `census_data` and the latter if our second specified data set was `census_data` within the brackets of the function. If we instead had some observations in each data set which did not have a match (the `ppsort` ID did not match) and we didn't want to lose these observations, we could use the `full_join()` option to retain all observations within both datasets in our final dataframe. 

Finally, if we wanted only those observations which had matching `ppsort` IDs across both datasets, we could use the `inner_join()` function, returning us a smaller dataset. This is implicitly what we did in our merge above; however, since all observations in both datasets matched on `ppsort`, we didn't lose anything. For a helpful clarification of these commands, check out the help menu for these specific merges below!

```{r}
?inner_join
```

## Exercise: Combining Dataframes

Create an object `A` which is a data frame with two columns and two rows. The first column should be called `ID` and have values 1 and 2, while the second column should be called `value1` and have values 10 and 11. 

Then create a second object named `B` which is a dataframe with two columns and two rows. The first column should be called ID and perfectly match the IDs in `A`, while the second column should be called `value2` and have values 12 and 13. Finally, merge these two data frames along the ID column and store in the object `answer4`.

```{r}
# your code here

answer4 <- ... # fill me in!

test_4()
```



# Conclusion
In this notebook, we have covered the basic process of working with data. You should now be familiar with how to load in data, how to define and redefine variables, how to drop missing observations, how to add in new data and drop existing data to meet your research purposes. This general scheme is critical to any research project, so it is important to keep in mind as you progress throughout your undergraduate economics courses and beyond.

